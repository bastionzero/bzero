// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	bzcert "bastionzero.com/bctl/v1/bzerolib/keysplitting/bzcert"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BZCertVerifier is an autogenerated mock type for the BZCertVerifier type
type BZCertVerifier struct {
	mock.Mock
}

// Verify provides a mock function with given fields: bzCert
func (_m *BZCertVerifier) Verify(bzCert bzcert.BZCert) (string, time.Time, error) {
	ret := _m.Called(bzCert)

	var r0 string
	if rf, ok := ret.Get(0).(func(bzcert.BZCert) string); ok {
		r0 = rf(bzCert)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(bzcert.BZCert) time.Time); ok {
		r1 = rf(bzCert)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(bzcert.BZCert) error); ok {
		r2 = rf(bzCert)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type NewBZCertVerifierT interface {
	mock.TestingT
	Cleanup(func())
}

// NewBZCertVerifier creates a new instance of BZCertVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBZCertVerifier(t NewBZCertVerifierT) *BZCertVerifier {
	mock := &BZCertVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
